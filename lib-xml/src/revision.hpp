// This file was generated by VersionString.cmake

#pragma once

#include <ostream>

constexpr const char klibzeepProjectName[] = "libzeep";
constexpr const char klibzeepVersionNumber[] = "6.0.4";
constexpr int klibzeepBuildNumber = 1497;
constexpr const char klibzeepRevisionGitTag[] = "c1be40c*";
constexpr const char klibzeepRevisionDate[] = "2023-08-16T09:12:32Z";

#ifndef VERSION_INFO_DEFINED
#define VERSION_INFO_DEFINED 1

namespace version_info_v1
{

class version_info_base
{
  public:

	static void write(std::ostream &os, bool verbose)
	{
		auto &s_head = head();
		if (s_head != nullptr)
			write(s_head, os, verbose);
	}

  protected:

	version_info_base(const char *name, const char *version, int build_number, const char *git_tag, const char *revision_date)
		: m_name(name)
		, m_version(version)
		, m_build_number(build_number)
		, m_git_tag(git_tag)
		, m_revision_date(revision_date)
	{
		auto &s_head = head();
		m_next = s_head;
		s_head = this;
	}

	static void write(const version_info_base *inst, std::ostream &os, bool verbose)
	{
		if (inst->m_next)
		{
			write(inst->m_next, os, verbose);

			if (not verbose)
				return;
			
			os << '-' << std::endl;
		}

		os << inst->m_name << " version " << inst->m_version << std::endl;

		if (verbose)
		{
			if (inst->m_build_number != 0)
			{
				os << "build: " << inst->m_build_number << ' ' << inst->m_revision_date << std::endl;
				if (inst->m_git_tag[0] != 0)
					os << "git tag: " << inst->m_git_tag << std::endl;
			}
		}
	}

	using version_info_ptr = version_info_base *;

	static version_info_ptr &head()
	{
		static version_info_ptr s_head = nullptr;
		return s_head;
	}

	const char *m_name;
	const char *m_version;
	int m_build_number;
	const char *m_git_tag;
	const char *m_revision_date;
	version_info_base *m_next = nullptr;
};

template<typename T>
class version_info : public version_info_base
{
  public:
	using implementation_type = T;

	version_info(const char *name, const char *version, int build_number, const char *git_tag, const char *revision_date)
		: version_info_base(name, version, build_number, git_tag, revision_date)
	{
	}

	struct register_object
	{
		register_object()
		{
			static implementation_type s_instance;
		}
	};

	template<register_object&> struct reference_object;

	static register_object s_registered_object;
	static reference_object<s_registered_object> s_referenced_object;
};

template<typename T> typename version_info<T>::register_object version_info<T>::s_registered_object;

}

inline void write_version_string(std::ostream &os, bool verbose)
{
	version_info_v1::version_info_base::write(os, verbose);
}

#endif

class version_info_libzeep_impl : public version_info_v1::version_info<version_info_libzeep_impl>
{
  public:
	version_info_libzeep_impl()
		: version_info(klibzeepProjectName, klibzeepVersionNumber, klibzeepBuildNumber, klibzeepRevisionGitTag, klibzeepRevisionDate)
	{
	}
};
