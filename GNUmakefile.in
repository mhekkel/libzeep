# Master makefile for libzeep
#
#          copyright 2019, Maarten L. Hekkelman
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)
#

SHELL 				= @SHELL@

.PHONY: firstTarget
firstTarget: all

CXX					= @CXX@
CXXFLAGS			= @CPPFLAGS@ @CXXFLAGS@ @BOOST_CPPFLAGS@
LDFLAGS				= @LDFLAGS@ @BOOST_LDFLAGS@
LIBS				= @LIBS@

prefix				= @prefix@
exec_prefix			= @exec_prefix@
libdir				= @libdir@
datarootdir			= @datarootdir@
includedir			= @includedir@
docdir				= @docdir@
pkgconfigdir		= $(libdir)/pkgconfig

BOOST_LIBS			= program_options

LIBS				+= $(BOOST_LIBS:%=-lboost_%)

ifneq "$(CHECK_CONFIG)" ""

GNUmakefile: config.status GNUmakefile.in
	$(SHELL) ./config.status

config.status: configure
	$(SHELL) ./config.status --recheck

configure: configure.ac
	autoconf

endif

# libtool stuff

LIBTOOL_DEPS = @LIBTOOL_DEPS@
libtool: $(LIBTOOL_DEPS)
	$(SHELL) ./config.status libtool

LIBTOOL = $(SHELL) @abs_top_builddir@/libtool
CXXCOMPILE = $(LIBTOOL) --silent --tag=CXX --mode=compile $(CXX) $(CXXFLAGS)
CXXLINK = $(LIBTOOL) --silent --tag=CXX --mode=link $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@

# main build variables
CXXFLAGS            += -Wall -Wno-multichar

LIB_NAME			= @PACKAGE_NAME@
LIB_VERSION			= @LZ_LT_VERSION@
LIB_TARGET			= $(LIB_NAME).la
VERSION             = @PACKAGE_VERSION@
DIST_NAME           = @PACKAGE_NAME@-@PACKAGE_VERSION@

# documentation rules
BUILD_DOCS			= @BUILD_DOCS_TRUE@
BJAM				= @BJAM@

VPATH += lib-http/src:lib-json/src:lib-xml/src

# targets

OBJDIR = obj
ifeq "$(DEBUG)" "1"
	OBJDIR	:= $(OBJDIR).dbg
endif

$(OBJDIR):
	mkdir -p $(OBJDIR)

OBJECTS = \
	$(OBJDIR)/connection.lo \
	$(OBJDIR)/controller.lo \
	$(OBJDIR)/crypto.lo \
	$(OBJDIR)/daemon.lo \
	$(OBJDIR)/el-processing.lo \
	$(OBJDIR)/error-handler.lo \
	$(OBJDIR)/format.lo \
	$(OBJDIR)/glob.lo \
	$(OBJDIR)/html-controller.lo \
	$(OBJDIR)/login-controller.lo \
	$(OBJDIR)/message-parser.lo \
	$(OBJDIR)/preforked-server.lo \
	$(OBJDIR)/reply.lo \
	$(OBJDIR)/request.lo \
	$(OBJDIR)/rest-controller.lo \
	$(OBJDIR)/security.lo \
	$(OBJDIR)/server.lo \
	$(OBJDIR)/soap-controller.lo \
	$(OBJDIR)/tag-processor-v2.lo \
	$(OBJDIR)/tag-processor.lo \
	$(OBJDIR)/template-processor.lo




# lib-http links against lib-xml and lib-json
lib-http: lib-xml lib-json

.PHONY: libraries
libraries: $(ZEEP_LIBS:%=lib-%) | $(OUTPUT_DIR)

.PHONY: test
test: $(ZEEP_LIB_PARTS:%=%_test)

.PHONY: examples
examples: libraries
	+$(MAKE) -C examples all

.PHONY: doc
ifeq "$(BUILD_DOCS)" "1"
doc:
	cd doc; $(BJAM)
else
doc:
	echo "Documentation was not enabled, use the --enable-documentation flag with configure"
endif

.PHONY: all	
all: libraries
ifeq "$(BUILD_DOCS)" "1"
all: doc
endif

# Install the libraries
.PHONY: install-libs
install-libs: libraries
	install -d $(libdir)
	for lib in $(ZEEP_LIB_PARTS); do \
		$(LIBTOOL) --mode=install install lib/libzeep-$${lib}.la $(libdir);\
	done

# Install header files and .pc files
.PHONY: install-dev
install-dev: libraries
	for dir in . ./http ./json ./xml ; do \
		install -d $(includedir)/zeep/$${dir}; \
		for hdr in include/zeep/$${dir}/*.hpp ; do \
			install $${hdr} $(includedir)/zeep/$${dir}; \
		done; \
	done
	install -d $(pkgconfigdir)
	for lib in $(ZEEP_LIB_PARTS); do \
		install -m 644 lib-$${lib}/libzeep-$${lib}.pc $(pkgconfigdir)/libzeep-$${lib}.pc; \
	done

.PHONY: install-doc
install-doc: doc
	cd doc; for d in `find html -type d`; do install -d $(docdir)/libzeep-doc/$$d; done
	cd doc; for f in `find html -type f`; do install $$f $(docdir)/libzeep-doc/$$f; done
	mkdir $(DIST_NAME)
	git archive master | tar -x -C $(DIST_NAME)
	cd $(DIST_NAME); tar cvf ../examples.tgz examples/
	install examples.tgz $(docdir)/libzeep-doc/examples.tgz
	rm -rf $(DIST_NAME) examples.tgz

.PHONY: install
install: install-libs install-dev
ifeq "$(BUILD_DOCS)" "1"
	+$(MAKE) install-doc
endif

.PHONY: clean
clean: $(ZEEP_LIB_PARTS:%=%_clean)
	rm -rf lib/*
	$(MAKE) -C examples clean
	cd doc; $$(which $(BJAM) > /dev/null) && $(BJAM) clean || echo "No $(BJAM) installed, cannot clean doc"
	rm -f $(DIST_NAME).tgz

.PHONY: dist
dist: doc
	rm -rf $(DIST_NAME)
	mkdir $(DIST_NAME)
	git archive master | tar -x -C $(DIST_NAME)
	find doc/html -depth | cpio -pd $(DIST_NAME)
	tar czf $(DIST_NAME).tgz $(DIST_NAME)
	rm -rf $(DIST_NAME)

.PHONY: FORCE
FORCE:
