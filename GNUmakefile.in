# Master makefile for libzeep
#
#          copyright 2019, Maarten L. Hekkelman
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)
#

SHELL 				= @SHELL@

.PHONY: firstTarget
firstTarget: all

CXX					= @CXX@
CXXFLAGS			= @CPPFLAGS@ @CXXFLAGS@ @BOOST_CPPFLAGS@
LDFLAGS				= @LDFLAGS@ @BOOST_LDFLAGS@
LIBS				= @BOOST_PROGRAM_OPTIONS_LIB@ @BOOST_DATE_TIME_LIB@ @LIBS@

prefix				= @prefix@
exec_prefix			= @exec_prefix@
libdir				= @libdir@
datarootdir			= @datarootdir@
includedir			= @includedir@
docdir				= @docdir@
pkgconfigdir		= $(libdir)/pkgconfig

ifneq "$(CHECK_CONFIG)" ""

GNUmakefile: config.status GNUmakefile.in
	$(SHELL) ./config.status

config.status: configure
	$(SHELL) ./config.status --recheck

configure: configure.ac
	autoconf

endif

LIB_NAME			= @PACKAGE_NAME@
LIB_VERSION			= @LZ_LT_VERSION@
LIB_TARGET			= $(LIB_NAME).la
VERSION             = @PACKAGE_VERSION@
DIST_NAME           = @PACKAGE_NAME@-@PACKAGE_VERSION@

# libtool stuff

LIBTOOL_DEPS = @LIBTOOL_DEPS@
libtool: $(LIBTOOL_DEPS)
	$(SHELL) ./config.status libtool

LIBTOOL = $(SHELL) @abs_top_builddir@/libtool
CXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(CXXFLAGS)
CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXX) $(CXXFLAGS) $(LDFLAGS) -version-info $(LIB_VERSION) -o $@

# main build variables
CXXFLAGS            += -Wall -Wno-multichar -I include

# documentation rules
BUILD_DOCS			= @BUILD_DOCS_TRUE@
BJAM				= @BJAM@

VPATH += lib-http/src:lib-json/src:lib-xml/src:lib-http/test:lib-json/test:lib-xml/test

# targets

OBJDIR = obj
ifeq "$(DEBUG)" "1"
	OBJDIR	:= $(OBJDIR).dbg
endif

$(OBJDIR):
	mkdir -p $(OBJDIR)

OBJECTS = \
	$(OBJDIR)/connection.lo \
	$(OBJDIR)/controller.lo \
	$(OBJDIR)/crypto.lo \
	$(OBJDIR)/daemon.lo \
	$(OBJDIR)/el-processing.lo \
	$(OBJDIR)/error-handler.lo \
	$(OBJDIR)/format.lo \
	$(OBJDIR)/glob.lo \
	$(OBJDIR)/html-controller.lo \
	$(OBJDIR)/login-controller.lo \
	$(OBJDIR)/message-parser.lo \
	$(OBJDIR)/preforked-server.lo \
	$(OBJDIR)/reply.lo \
	$(OBJDIR)/request.lo \
	$(OBJDIR)/rest-controller.lo \
	$(OBJDIR)/security.lo \
	$(OBJDIR)/server.lo \
	$(OBJDIR)/soap-controller.lo \
	$(OBJDIR)/tag-processor-v2.lo \
	$(OBJDIR)/tag-processor.lo \
	$(OBJDIR)/template-processor.lo \
	$(OBJDIR)/element.lo \
	$(OBJDIR)/json-parser.lo \
	$(OBJDIR)/character-classification.lo \
	$(OBJDIR)/doctype.lo \
	$(OBJDIR)/document.lo \
	$(OBJDIR)/node.lo \
	$(OBJDIR)/xml-parser.lo \
	$(OBJDIR)/xpath.lo

-include $(OBJECTS:%.lo=%.d)

$(OBJDIR)/%.lo: %.cpp | $(OBJDIR)
	@ echo ">>" $<
	@ $(CXXCOMPILE) -MT $@ -MD -MP -MF $(OBJDIR)/$*.d -c -o $@ $<

$(OBJDIR)/%.o: %.cpp | $(OBJDIR)
	@ echo ">>" $<
	@ $(CXX) $(CXXFLAGS) -MT $@ -MD -MP -MF $(OBJDIR)/$*.d -c -o $@ $<

$(LIB_TARGET): $(OBJECTS)
	$(CXXLINK) -rpath $(libdir) $(OBJECTS) $(LDFLAGS) $(LIBS)

# Example code

.PHONY: examples
examples: libraries
	+$(MAKE) -C examples all

# Documentation

.PHONY: doc
ifeq "$(BUILD_DOCS)" "1"
doc:
	cd doc; $(BJAM)
else
doc:
	echo "Documentation was not enabled, use the --enable-documentation flag with configure"
endif

.PHONY: all	
all: $(LIB_TARGET)

ifeq "$(BUILD_DOCS)" "1"
all: doc
endif

# Install the libraries
.PHONY: install-lib
install-lib: $(LIB_TARGET)
	install -d $(libdir)
	$(LIBTOOL) --mode=install install $(LIB_TARGET) $(libdir);

# Install header files and .pc files
.PHONY: install-dev
install-dev: libraries
	for dir in . ./http ./json ./xml ; do \
		install -d $(includedir)/zeep/$${dir}; \
		for hdr in include/zeep/$${dir}/*.hpp ; do \
			install $${hdr} $(includedir)/zeep/$${dir}; \
		done; \
	done
	install -d $(pkgconfigdir)
	install -m 644 lib-$${lib}/libzeep.pc $(pkgconfigdir)/libzeep-$${lib}.pc;
	cd examples; for d in `find . -type d`; do install -d $(docdir)/libzeep-dev/$$d; done
	cd examples; for f in `find . -type f`; do install -m644 $$f $(docdir)/libzeep-dev/$$f; done

.PHONY: install-doc
install-doc: doc
	cd doc; for d in `find html -type d`; do install -d $(docdir)/libzeep-doc/$$d; done
	cd doc; for f in `find html -type f`; do install -m644 $$f $(docdir)/libzeep-doc/$$f; done

.PHONY: install
install: install-libs install-dev
ifeq "$(BUILD_DOCS)" "1"
	+$(MAKE) install-doc
endif

# Test rules

tests:
	mkdir -p tests




define TEST_template =

-include $$(OBJDIR)/$(1)-test.d

$(1)_OBJECTS = $$(OBJDIR)/client-test-code.o $$(OBJDIR)/$(1)-test.o

# ifneq ($(USE_RSRC),0)
# $(1)_OBJECTS += $$(OBJDIR)/test_rsrc.o
# endif

tests/$(1)-test: $(LIB_TARGET) $$($(1)_OBJECTS) | tests
	@ echo ">>> building $(1)-test"
	@ $(CXX) -o $$@ $$($(1)_OBJECTS) $$(CFLAGS) $$(CXXFLAGS) $(LDFLAGS) -L.libs -lzeep $(LIBS)

.PHONY: $(1)-test
$(1)-test: tests/$(1)-test
	LD_LIBRARY_PATH=.libs tests/$(1)-test $$($(1)_PARAMS)

endef

TESTS = unit parser serializer xpath json crypto http processor webapp soap rest

ifneq ($(USE_RSRC),0)
TESTS += rsrc_webapp
endif

$(foreach part,$(TESTS),$(eval $(call TEST_template,$(part))))

.PHONY: test
test: $(TESTS:%=%-test)

.PHONY: clean
clean:
	rm -rf $(LIB_TARGET) $(OBJDIR) $(DIST_NAME).tgz .libs
	$(MAKE) -C examples clean
	cd doc; $$(which $(BJAM) > /dev/null) && $(BJAM) clean || echo "No $(BJAM) installed, cannot clean doc"

.PHONY: dist
dist: doc
	rm -rf $(DIST_NAME)
	mkdir $(DIST_NAME)
	git archive master | tar -x -C $(DIST_NAME)
	find doc/html -depth | cpio -pd $(DIST_NAME)
	tar czf $(DIST_NAME).tgz $(DIST_NAME)
	rm -rf $(DIST_NAME)
